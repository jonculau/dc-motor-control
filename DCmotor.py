from matplotlib import pyplot as plt
import numpy as np
# The `dc_motor` class represents a DC motor and provides methods for simulating its behavior and
# retrieving simulation data.
class dc_motor:
    sampling_time = 0.001
    simulation_data = {}
    A = []
    B = []
    B_w = []
    def __init__(self, K_t, J, L, eta, R, K_b):
        """
        The function initializes the values of K_t, J, L, B, R, and K_b.
        
        :param K_t: The torque constant of the motor. It represents the relationship between the current
        flowing through the motor and the torque produced by the motor
        :param J: The moment of inertia of the system
        :param L: L is the inductance of the motor. It represents the ability of the motor to store
        electrical energy in its magnetic field. It is measured in henries (H)
        :param B: B is the viscous friction coefficient of the motor. It represents the resistance to
        motion caused by the friction between the motor's moving parts and the surrounding environment
        :param R: The resistance of the motor's armature winding
        :param K_b: The back-emf constant of the motor. It represents the relationship between the
        motor's speed and the voltage generated by the motor
        """
        self.A = np.array([[-R / L, -K_b / L], [K_t / J, -eta / J]])
        self.B = np.array([[1 / L], [0]])
        self.B_w = np.array([[0], [1]])

    

    def sys_dynamics(self, input, disturbance=0):
        """
        The function calculates the derivative of the state vector and updates the state vector based on
        the system dynamics.
        
        :param input: The input parameter represents the input to the system. It is used in the
        calculation of the derivative of the state vector
        :param disturbance: The disturbance parameter represents any external influence or interference
        that affects the system dynamics. It is an optional parameter, and its default value is set to
        0, indicating no disturbance, defaults to 0 (optional)
        :return: a list containing the updated values of Ia and w.
        """
       #   Calculates the derivative of the state vector 
        dot_x = self.A.dot(np.array([
            [self.simulation_data['Ia'][-1]], 
            [self.simulation_data['w'][-1]]
            ])) 
        dot_x += self.B.dot(input)
        dot_x += self.B_w.dot(disturbance)

        #   Calculates the new state vector
        Ia = self.simulation_data['Ia'][-1] + dot_x[0][0] * self.sampling_time
        w = self.simulation_data['w'][-1] + dot_x[1][0] * self.sampling_time
        t = self.simulation_data['t'][-1] + self.sampling_time;

        #   Appends the new state vector to the simulation data
        self.simulation_data['Ia'].append(Ia)
        self.simulation_data['w'].append(w)
        self.simulation_data['t'].append(t)
        self.simulation_data['u'].append(input)
        return [Ia, w]

    def sys_init(self, initialConditions={
        'Ia': 0,
        'w': 0
    }, sampling_time=0.001):
        self.sampling_time = sampling_time
        self.simulation_data= {
            'Ia': [initialConditions['Ia']],
            'w': [initialConditions['w']],
            't': [0],
            'u': []
        };
        
    def step(self, time):
        """
        The function "step" initializes the system and then iterates over a range of time steps, calling
        the system dynamics function with a step size of 1.
        
        :param time: The parameter "time" represents the total time for which the system dynamics need
        to be simulated
        """
        self.sys_init()
        for i in range(int(time/self.sampling_time)):
            self.sys_dynamics(1)

    def plot(self):
        """
        The function "plot" plots the simulation data
        """
        plt.plot(self.simulation_data['t'], self.simulation_data['w'], label='$\omega(t)$')
        self.simulation_data['u'].append(self.simulation_data['u'][-1])
        plt.plot(self.simulation_data['t'], self.simulation_data['u'], label='u(t)')
        plt.grid()
        plt.legend()
        plt.show()

    